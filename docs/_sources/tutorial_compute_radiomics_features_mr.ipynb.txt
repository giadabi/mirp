{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1e447b05-08e1-4326-9709-531acf639a69",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "# Tutorial: Computing radiomics features\n",
    "\n",
    "This tutorial describes step-by-step how you can compute radiomics features from medical imaging using MIRP.\n",
    "\n",
    "## Download example data\n",
    "\n",
    "We have prepared an (anonymised) example dataset of T1-weighted images of patients with soft-tissue sarcoma, that is a subset of the public [Soft-tissue Sarcoma dataset](https://www.cancerimagingarchive.net/collection/soft-tissue-sarcoma/) \\[1\\]. The example dataset is a zip-file containing imaging data for three patients."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3d8f91a9-e514-47bc-8c9b-5e37fb8662e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from urllib.request import urlopen\n",
    "from io import BytesIO\n",
    "from zipfile import ZipFile\n",
    "\n",
    "url = r\"https://github.com/oncoray/mirp/raw/acd0b11521acd07aa9597e8f55d480bc54af4e04/data/tutorial_radiomics_mr_t1_data.zip\"\n",
    "\n",
    "# Specify location where the data is stored.\n",
    "save_dir = \".\"\n",
    "\n",
    "with urlopen(url) as zip_url_pointer:\n",
    "    with ZipFile(BytesIO(zip_url_pointer.read())) as example_data:\n",
    "        example_data.extractall(save_dir)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ac63cb7-a935-4e43-a6ce-0c109d9bc10b",
   "metadata": {},
   "source": [
    "This creates a folder with the following structure:\n",
    "\n",
    "    sts_images\n",
    "    ├─ STS_001\n",
    "    │   └─ ...\n",
    "    ├─ ...\n",
    "    └─ STS_003\n",
    "        └─ mr_t1\n",
    "            ├─ image\n",
    "            |  ├─ 1-01.dcm\n",
    "            |  ├─ ...\n",
    "            |  └─ 1-36.dcm\n",
    "            └─ mask\n",
    "                └─ 1-1.dcm\n",
    "\n",
    "In this example dataset, the T1-weighted images are stored in DICOM format in the `mr_t1/image` subdirectory. A segmentation mask is also stored in DICOM format, but in the `mr_t1/mask` subdirectory.\n",
    "\n",
    "## Finding mask labels\n",
    "\n",
    "Radiomics features are typically computed from regions of interest, such as a tumour. These regions are delineated by experts or auto-segmentation AI, and stored as segmentation masks. MIRP needs to know which mask label (region of interest) should be used for computing features. A first step is to identify which mask labels exist. This can be done using the `extract_mask_labels` function. We need to define the main directory (`.../sts_images`), and optionally the directory structure relative to the patient directory (`mr_t1/mask`), where the masks can be found."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a89c4b13-6fc5-4c72-8f67-2048891b23fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sample_name</th>\n",
       "      <th>modality</th>\n",
       "      <th>dir_path</th>\n",
       "      <th>file_name</th>\n",
       "      <th>study_description</th>\n",
       "      <th>series_description</th>\n",
       "      <th>acquisition_time</th>\n",
       "      <th>series_instance_uid</th>\n",
       "      <th>frame_of_reference_uid</th>\n",
       "      <th>roi_label</th>\n",
       "      <th>mask_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>STS_001</td>\n",
       "      <td>rtstruct</td>\n",
       "      <td>sts_images\\STS_001\\mr_t1\\mask</td>\n",
       "      <td>1-1.dcm</td>\n",
       "      <td>^THIGH</td>\n",
       "      <td>RTstruct_T1</td>\n",
       "      <td>2009-10-17 17:16:35.000915</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.169505605471...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.178691248814...</td>\n",
       "      <td>GTV_Mass</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>STS_001</td>\n",
       "      <td>rtstruct</td>\n",
       "      <td>sts_images\\STS_001\\mr_t1\\mask</td>\n",
       "      <td>1-1.dcm</td>\n",
       "      <td>^THIGH</td>\n",
       "      <td>RTstruct_T1</td>\n",
       "      <td>2009-10-17 17:16:35.000915</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.169505605471...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.178691248814...</td>\n",
       "      <td>GTV_Edema</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>STS_002</td>\n",
       "      <td>rtstruct</td>\n",
       "      <td>sts_images\\STS_002\\mr_t1\\mask</td>\n",
       "      <td>1-1.dcm</td>\n",
       "      <td>L-SPINE</td>\n",
       "      <td>RTstruct_T1</td>\n",
       "      <td>2009-10-18 11:56:49.000312</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.337975716601...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.188414386222...</td>\n",
       "      <td>GTV_Mass</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>STS_002</td>\n",
       "      <td>rtstruct</td>\n",
       "      <td>sts_images\\STS_002\\mr_t1\\mask</td>\n",
       "      <td>1-1.dcm</td>\n",
       "      <td>L-SPINE</td>\n",
       "      <td>RTstruct_T1</td>\n",
       "      <td>2009-10-18 11:56:49.000312</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.337975716601...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.188414386222...</td>\n",
       "      <td>GTV_Edema</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>STS_003</td>\n",
       "      <td>rtstruct</td>\n",
       "      <td>sts_images\\STS_003\\mr_t1\\mask</td>\n",
       "      <td>1-1.dcm</td>\n",
       "      <td>MRI PELVIS C- C</td>\n",
       "      <td>RTstruct_T1</td>\n",
       "      <td>2009-10-18 12:10:34.000164</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.200331945037...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.179145981196...</td>\n",
       "      <td>GTV_Mass</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>STS_003</td>\n",
       "      <td>rtstruct</td>\n",
       "      <td>sts_images\\STS_003\\mr_t1\\mask</td>\n",
       "      <td>1-1.dcm</td>\n",
       "      <td>MRI PELVIS C- C</td>\n",
       "      <td>RTstruct_T1</td>\n",
       "      <td>2009-10-18 12:10:34.000164</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.200331945037...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.179145981196...</td>\n",
       "      <td>GTV_Edema</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  sample_name  modality                       dir_path file_name  \\\n",
       "0     STS_001  rtstruct  sts_images\\STS_001\\mr_t1\\mask   1-1.dcm   \n",
       "1     STS_001  rtstruct  sts_images\\STS_001\\mr_t1\\mask   1-1.dcm   \n",
       "0     STS_002  rtstruct  sts_images\\STS_002\\mr_t1\\mask   1-1.dcm   \n",
       "1     STS_002  rtstruct  sts_images\\STS_002\\mr_t1\\mask   1-1.dcm   \n",
       "0     STS_003  rtstruct  sts_images\\STS_003\\mr_t1\\mask   1-1.dcm   \n",
       "1     STS_003  rtstruct  sts_images\\STS_003\\mr_t1\\mask   1-1.dcm   \n",
       "\n",
       "  study_description series_description           acquisition_time  \\\n",
       "0            ^THIGH        RTstruct_T1 2009-10-17 17:16:35.000915   \n",
       "1            ^THIGH        RTstruct_T1 2009-10-17 17:16:35.000915   \n",
       "0           L-SPINE        RTstruct_T1 2009-10-18 11:56:49.000312   \n",
       "1           L-SPINE        RTstruct_T1 2009-10-18 11:56:49.000312   \n",
       "0   MRI PELVIS C- C        RTstruct_T1 2009-10-18 12:10:34.000164   \n",
       "1   MRI PELVIS C- C        RTstruct_T1 2009-10-18 12:10:34.000164   \n",
       "\n",
       "                                 series_instance_uid  \\\n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.169505605471...   \n",
       "1  1.3.6.1.4.1.14519.5.2.1.5168.1900.169505605471...   \n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.337975716601...   \n",
       "1  1.3.6.1.4.1.14519.5.2.1.5168.1900.337975716601...   \n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.200331945037...   \n",
       "1  1.3.6.1.4.1.14519.5.2.1.5168.1900.200331945037...   \n",
       "\n",
       "                              frame_of_reference_uid  roi_label  mask_index  \n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.178691248814...   GTV_Mass           0  \n",
       "1  1.3.6.1.4.1.14519.5.2.1.5168.1900.178691248814...  GTV_Edema           0  \n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.188414386222...   GTV_Mass           1  \n",
       "1  1.3.6.1.4.1.14519.5.2.1.5168.1900.188414386222...  GTV_Edema           1  \n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.179145981196...   GTV_Mass           2  \n",
       "1  1.3.6.1.4.1.14519.5.2.1.5168.1900.179145981196...  GTV_Edema           2  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "from mirp import extract_mask_labels\n",
    "\n",
    "extract_mask_labels(\n",
    "    mask=os.path.join(save_dir, \"sts_images\"),\n",
    "    mask_sub_folder=os.path.join(\"mr_t1\", \"mask\")\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0db6ba4e-9135-4616-9e2a-a0902559611e",
   "metadata": {},
   "source": [
    "We are lucky that all masks are consistently labelled. `GTV_Mass` and `GTV_Edema` both refer to the gross tumour volume, i.e. that part of the tumour that is visible in medical imaging. `GTV-Edema` also covers fluid surrounding the gross tumour volume itself.\n",
    "\n",
    "## Visualising images\n",
    "\n",
    "It is often useful to inspect images before computing radiomics features. External viewers for DICOM and many other image types exist, but MIRP also has a simple visualisation tool. You can visualise images by exporting them in MIRP internal formats using `extract_images`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f86eb246-2d96-46dc-af29-0d4b0d00286a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO\t: MainProcess \t 2024-06-05 11:55:22,262 \t Initialising image extraction using mr images for STS_003.\n"
     ]
    }
   ],
   "source": [
    "from mirp import extract_images\n",
    "\n",
    "images = extract_images(\n",
    "    image=os.path.join(save_dir, \"sts_images\", \"STS_003\", \"mr_t1\", \"image\"),\n",
    "    mask=os.path.join(save_dir, \"sts_images\", \"STS_003\", \"mr_t1\", \"mask\"),\n",
    "    roi_name=\"GTV_Mass\",\n",
    "    image_export_format=\"native\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e347f59-bb2d-4883-88b8-49d77f7ec6bd",
   "metadata": {},
   "source": [
    "By default, `extract_images` will export dictionaries containing image and mask data (as `numpy.ndarray`) and associated metadata. That way `extract_images` can be used to read and process images as part of an external workflow. The default output can be visualised using `matplotlib` and other tools. Here we use `image_export_format=\"native\"` to export images and masks in the native MIRP format. The output of `extract_images` is a list of images and masks, with one entry per image dataset. We only assess a single image here, which means that `images` only has one element. The nested list always consists of the image -- and any derivatives, such as filtered images -- and masks associated with the image. We can visualise an exported image using its `show` method as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9736db62-aa7a-4f15-9e8d-3d1dbbfcfce9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "image, mask = images[0]\n",
    "image[0].show(mask=mask[0], slice_id=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b47d4077-5b8c-42e4-aaa2-d07a253ea4b2",
   "metadata": {},
   "source": [
    "Though just an image is shown here, executing this code outside of a Jupyter Notebook will start an interactive plotter that can be scrolled through.\n",
    "\n",
    "The T1-weighted image appears as expected: muscle tissue appears grey, and fatty tissue appears bright. The `GTV_Mass` segmentation mask covers the tumour -- use `image[0].show()` to view the image without a mask.\n",
    "\n",
    "## Assessing image metadata\n",
    "\n",
    "Image metadata are important for understanding the image and how it was acquired and reconstructed. MIRP allows for exporting image metadata from DICOM and other image formats, though for non-DICOM formats metadata will be considerably more limited."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8c8e563e-f493-48e9-8a1f-0e2e3b01ccd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sample_name</th>\n",
       "      <th>modality</th>\n",
       "      <th>dir_path</th>\n",
       "      <th>spacing_z</th>\n",
       "      <th>spacing_y</th>\n",
       "      <th>spacing_x</th>\n",
       "      <th>file_name</th>\n",
       "      <th>study_description</th>\n",
       "      <th>series_description</th>\n",
       "      <th>acquisition_time</th>\n",
       "      <th>series_instance_uid</th>\n",
       "      <th>frame_of_reference_uid</th>\n",
       "      <th>scanner_type</th>\n",
       "      <th>manufacturer</th>\n",
       "      <th>image_type</th>\n",
       "      <th>scanning_sequence</th>\n",
       "      <th>scanning_sequence_variant</th>\n",
       "      <th>image_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>STS_001</td>\n",
       "      <td>mr</td>\n",
       "      <td>sts_images\\STS_001\\mr_t1\\image</td>\n",
       "      <td>5.2</td>\n",
       "      <td>0.390625</td>\n",
       "      <td>0.390625</td>\n",
       "      <td>1-40.dcm</td>\n",
       "      <td>^THIGH</td>\n",
       "      <td>AXIAL SE T1 - RESEARCH</td>\n",
       "      <td>2000-09-03 11:10:33.000876</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.236909650266...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.178691248814...</td>\n",
       "      <td>Avanto</td>\n",
       "      <td>SIEMENS</td>\n",
       "      <td>['ORIGINAL', 'PRIMARY', 'M', 'ND', 'NORM']</td>\n",
       "      <td>SE</td>\n",
       "      <td>['SK', 'SP', 'OSP']</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>STS_002</td>\n",
       "      <td>mr</td>\n",
       "      <td>sts_images\\STS_002\\mr_t1\\image</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.892857</td>\n",
       "      <td>0.892857</td>\n",
       "      <td>1-01.dcm</td>\n",
       "      <td>L-SPINE</td>\n",
       "      <td>AXT1</td>\n",
       "      <td>2006-01-03 14:19:40.000530</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.103003228939...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.188414386222...</td>\n",
       "      <td>Intera</td>\n",
       "      <td>Philips Medical Systems</td>\n",
       "      <td>['ORIGINAL', 'PRIMARY', 'M_SE', 'M', 'SE']</td>\n",
       "      <td>SE</td>\n",
       "      <td>OSP</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>STS_003</td>\n",
       "      <td>mr</td>\n",
       "      <td>sts_images\\STS_003\\mr_t1\\image</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.781300</td>\n",
       "      <td>0.781300</td>\n",
       "      <td>1-36.dcm</td>\n",
       "      <td>MRI PELVIS C- C</td>\n",
       "      <td>AX T1</td>\n",
       "      <td>2005-03-30 11:28:05.000000</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.900154069973...</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.179145981196...</td>\n",
       "      <td>Signa HDxt</td>\n",
       "      <td>GE MEDICAL SYSTEMS</td>\n",
       "      <td>['ORIGINAL', 'PRIMARY', 'OTHER']</td>\n",
       "      <td>SE</td>\n",
       "      <td>SK</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  sample_name modality                        dir_path  spacing_z  spacing_y  \\\n",
       "0     STS_001       mr  sts_images\\STS_001\\mr_t1\\image        5.2   0.390625   \n",
       "1     STS_002       mr  sts_images\\STS_002\\mr_t1\\image        7.0   0.892857   \n",
       "2     STS_003       mr  sts_images\\STS_003\\mr_t1\\image        7.0   0.781300   \n",
       "\n",
       "   spacing_x file_name study_description      series_description  \\\n",
       "0   0.390625  1-40.dcm            ^THIGH  AXIAL SE T1 - RESEARCH   \n",
       "1   0.892857  1-01.dcm           L-SPINE                    AXT1   \n",
       "2   0.781300  1-36.dcm   MRI PELVIS C- C                   AX T1   \n",
       "\n",
       "            acquisition_time  \\\n",
       "0 2000-09-03 11:10:33.000876   \n",
       "1 2006-01-03 14:19:40.000530   \n",
       "2 2005-03-30 11:28:05.000000   \n",
       "\n",
       "                                 series_instance_uid  \\\n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.236909650266...   \n",
       "1  1.3.6.1.4.1.14519.5.2.1.5168.1900.103003228939...   \n",
       "2  1.3.6.1.4.1.14519.5.2.1.5168.1900.900154069973...   \n",
       "\n",
       "                              frame_of_reference_uid scanner_type  \\\n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.178691248814...       Avanto   \n",
       "1  1.3.6.1.4.1.14519.5.2.1.5168.1900.188414386222...       Intera   \n",
       "2  1.3.6.1.4.1.14519.5.2.1.5168.1900.179145981196...   Signa HDxt   \n",
       "\n",
       "              manufacturer                                  image_type  \\\n",
       "0                  SIEMENS  ['ORIGINAL', 'PRIMARY', 'M', 'ND', 'NORM']   \n",
       "1  Philips Medical Systems  ['ORIGINAL', 'PRIMARY', 'M_SE', 'M', 'SE']   \n",
       "2       GE MEDICAL SYSTEMS            ['ORIGINAL', 'PRIMARY', 'OTHER']   \n",
       "\n",
       "  scanning_sequence scanning_sequence_variant  image_index  \n",
       "0                SE       ['SK', 'SP', 'OSP']            0  \n",
       "1                SE                       OSP            1  \n",
       "2                SE                        SK            2  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from mirp import extract_image_parameters\n",
    "\n",
    "extract_image_parameters(\n",
    "    image=os.path.join(save_dir, \"sts_images\"),\n",
    "    image_sub_folder=os.path.join(\"mr_t1\", \"image\")\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37197395-07c1-43d7-99b1-b78d6cfc2839",
   "metadata": {},
   "source": [
    "Only known metadata are shown. For example, magnetic field strength was not present in the image metadata in this example.\n",
    "\n",
    "The metadata have important implications for the image processing:\n",
    "\n",
    "- The in-plane resolution is much higher than the distance between slices. This suggests that features should be computed by slice, instead in 3D.\n",
    "- The in-plane resolution differs between patients. This suggests that the images should be resampled to isotropic pixel sizes, e.g. 1.0 by 1.0 mm.\n",
    "- All three images were recorded in different scanners. This suggests that MR intensities cannot be compared between patients, and should be standardised.\n",
    "\n",
    "## Computing features\n",
    "\n",
    "The presented metadata suggest that image processing is required to make the MR images more comparable between patients. We will define three image processing steps:\n",
    "\n",
    "1. Image processing and feature computation are performed by slice (`by_slice=True`) due to large distances between image slices.\n",
    "2. In-plane resolution is resampled to 1.0 by 1.0 mm (`new_spacing=1.0`).\n",
    "3. Intensities are normalised, here using *z-normalisation* (`intensity_normalisation=\"standardisation\"`).\n",
    "\n",
    "In addition, we need to define parameters related to intensity discretisation for computing histogram-based and texture features. Since intensities were normalised using *z-normalisation*, we will use a *fixed bin number* algorithm (`base_discretisation_method=\"fixed_bin_number\"`) with 16 bins (`base_discretisation_n_bins=16`).\n",
    "\n",
    "Many more parameters can be specified, see [Configure the image processing and feature extraction workflow](https://oncoray.github.io/mirp/configuration.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c211ca72-ad62-491e-86ac-b30ac25ad6b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO\t: MainProcess \t 2024-06-05 11:55:23,768 \t Initialising feature computation using mr images for STS_001.\n",
      "INFO\t: MainProcess \t 2024-06-05 11:55:36,474 \t Initialising feature computation using mr images for STS_002.\n",
      "INFO\t: MainProcess \t 2024-06-05 11:55:46,159 \t Initialising feature computation using mr images for STS_003.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sample_name</th>\n",
       "      <th>image_file_name</th>\n",
       "      <th>image_directory</th>\n",
       "      <th>image_study_date</th>\n",
       "      <th>image_study_description</th>\n",
       "      <th>image_series_description</th>\n",
       "      <th>image_series_instance_uid</th>\n",
       "      <th>image_modality</th>\n",
       "      <th>image_pet_suv_type</th>\n",
       "      <th>image_mask_label</th>\n",
       "      <th>...</th>\n",
       "      <th>ngl_hdhge_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_glnu_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_glnu_norm_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_dcnu_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_dcnu_norm_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_dc_perc_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_gl_var_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_dc_var_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_dc_entr_d1_a0.0_2d_fbn_n16</th>\n",
       "      <th>ngl_dc_energy_d1_a0.0_2d_fbn_n16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>STS_001</td>\n",
       "      <td>None</td>\n",
       "      <td>sts_images\\STS_001\\mr_t1\\image</td>\n",
       "      <td>20000903</td>\n",
       "      <td>^THIGH</td>\n",
       "      <td>AXIAL SE T1 - RESEARCH</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.236909650266...</td>\n",
       "      <td>mr</td>\n",
       "      <td>None</td>\n",
       "      <td>GTV_Mass</td>\n",
       "      <td>...</td>\n",
       "      <td>649.904779</td>\n",
       "      <td>685.643163</td>\n",
       "      <td>0.202679</td>\n",
       "      <td>573.379973</td>\n",
       "      <td>0.164149</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.124407</td>\n",
       "      <td>2.835808</td>\n",
       "      <td>5.207281</td>\n",
       "      <td>0.034652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>STS_002</td>\n",
       "      <td>None</td>\n",
       "      <td>sts_images\\STS_002\\mr_t1\\image</td>\n",
       "      <td>20060103</td>\n",
       "      <td>L-SPINE</td>\n",
       "      <td>AXT1</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.103003228939...</td>\n",
       "      <td>mr</td>\n",
       "      <td>None</td>\n",
       "      <td>GTV_Mass</td>\n",
       "      <td>...</td>\n",
       "      <td>731.317187</td>\n",
       "      <td>232.044296</td>\n",
       "      <td>0.208755</td>\n",
       "      <td>212.059230</td>\n",
       "      <td>0.183419</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.301315</td>\n",
       "      <td>5.169630</td>\n",
       "      <td>5.048137</td>\n",
       "      <td>0.050158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>STS_003</td>\n",
       "      <td>None</td>\n",
       "      <td>sts_images\\STS_003\\mr_t1\\image</td>\n",
       "      <td>20050330</td>\n",
       "      <td>MRI PELVIS C- C</td>\n",
       "      <td>AX T1</td>\n",
       "      <td>1.3.6.1.4.1.14519.5.2.1.5168.1900.900154069973...</td>\n",
       "      <td>mr</td>\n",
       "      <td>None</td>\n",
       "      <td>GTV_Mass</td>\n",
       "      <td>...</td>\n",
       "      <td>608.689328</td>\n",
       "      <td>472.701740</td>\n",
       "      <td>0.345461</td>\n",
       "      <td>334.257475</td>\n",
       "      <td>0.238191</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.232402</td>\n",
       "      <td>5.422279</td>\n",
       "      <td>4.222418</td>\n",
       "      <td>0.132661</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 203 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  sample_name image_file_name                 image_directory  \\\n",
       "0     STS_001            None  sts_images\\STS_001\\mr_t1\\image   \n",
       "0     STS_002            None  sts_images\\STS_002\\mr_t1\\image   \n",
       "0     STS_003            None  sts_images\\STS_003\\mr_t1\\image   \n",
       "\n",
       "  image_study_date image_study_description image_series_description  \\\n",
       "0         20000903                  ^THIGH   AXIAL SE T1 - RESEARCH   \n",
       "0         20060103                 L-SPINE                     AXT1   \n",
       "0         20050330         MRI PELVIS C- C                    AX T1   \n",
       "\n",
       "                           image_series_instance_uid image_modality  \\\n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.236909650266...             mr   \n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.103003228939...             mr   \n",
       "0  1.3.6.1.4.1.14519.5.2.1.5168.1900.900154069973...             mr   \n",
       "\n",
       "  image_pet_suv_type image_mask_label  ... ngl_hdhge_d1_a0.0_2d_fbn_n16  \\\n",
       "0               None         GTV_Mass  ...                   649.904779   \n",
       "0               None         GTV_Mass  ...                   731.317187   \n",
       "0               None         GTV_Mass  ...                   608.689328   \n",
       "\n",
       "  ngl_glnu_d1_a0.0_2d_fbn_n16 ngl_glnu_norm_d1_a0.0_2d_fbn_n16  \\\n",
       "0                  685.643163                         0.202679   \n",
       "0                  232.044296                         0.208755   \n",
       "0                  472.701740                         0.345461   \n",
       "\n",
       "  ngl_dcnu_d1_a0.0_2d_fbn_n16 ngl_dcnu_norm_d1_a0.0_2d_fbn_n16  \\\n",
       "0                  573.379973                         0.164149   \n",
       "0                  212.059230                         0.183419   \n",
       "0                  334.257475                         0.238191   \n",
       "\n",
       "   ngl_dc_perc_d1_a0.0_2d_fbn_n16  ngl_gl_var_d1_a0.0_2d_fbn_n16  \\\n",
       "0                             1.0                       2.124407   \n",
       "0                             1.0                       3.301315   \n",
       "0                             1.0                       3.232402   \n",
       "\n",
       "   ngl_dc_var_d1_a0.0_2d_fbn_n16 ngl_dc_entr_d1_a0.0_2d_fbn_n16  \\\n",
       "0                       2.835808                       5.207281   \n",
       "0                       5.169630                       5.048137   \n",
       "0                       5.422279                       4.222418   \n",
       "\n",
       "  ngl_dc_energy_d1_a0.0_2d_fbn_n16  \n",
       "0                         0.034652  \n",
       "0                         0.050158  \n",
       "0                         0.132661  \n",
       "\n",
       "[3 rows x 203 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from mirp import extract_features\n",
    "\n",
    "features = extract_features(\n",
    "    image=os.path.join(save_dir, \"sts_images\"),\n",
    "    image_sub_folder=os.path.join(\"mr_t1\", \"image\"),\n",
    "    mask=os.path.join(save_dir, \"sts_images\"),\n",
    "    mask_sub_folder=os.path.join(\"mr_t1\", \"mask\"),\n",
    "    roi_name=\"GTV_Mass\",\n",
    "    by_slice=True,\n",
    "    intensity_normalisation=\"standardisation\",\n",
    "    new_spacing=1.0,\n",
    "    base_discretisation_method=\"fixed_bin_number\",\n",
    "    base_discretisation_n_bins=16\n",
    ")\n",
    "\n",
    "pd.concat(features)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbf3b352-31f1-4b75-928f-b25fcde2562a",
   "metadata": {},
   "source": [
    "This results in a `pandas.DataFrame` that has a row per image and mask. The first several columns contain parameters related to that image and mask, and how these were processed. After these, feature values are shown. These can be used for, e.g., machine learning using [scikit-learn](https://scikit-learn.org/stable/) or [familiar](https://cran.r-project.org/web/packages/familiar/index.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd5f9316-1fe5-4c0c-ab51-0fe255b39074",
   "metadata": {},
   "source": [
    "## References\n",
    "\n",
    "1. Vallières, Martin, Freeman, Carolyn R., Skamene, Sonia R., & El Naqa, Issam. (2015). A radiomics model from joint FDG-PET and MRI texture features for the prediction of lung metastases in soft-tissue sarcomas of the extremities (Soft-tissue-Sarcoma) \\[Dataset\\]. The Cancer Imaging Archive. http://doi.org/10.7937/K9/TCIA.2015.7GO2GSKS"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
